cmake_minimum_required(VERSION 2.8)

project (faster-examples)

set (faster_VERSION_MAJOR 0)
set (faster_VERSION_MINOR 1)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ")

find_package(OpenMP)
if(OPENMP_FOUND)
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
 set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif(OPENMP_FOUND)

find_package(MPI REQUIRED)
#set (MPI_CXX_COMPILER "mpicc")
add_definitions(${MPI_CXX_COMPILE_FLAGS})
include_directories(${MPI_CXX_INCLUDE_PATH})
link_directories(${MPI_CXX_LIBRARIES})
#set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
#set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
#include_directories("/usr/include/openmpi/")
set (EXTRA_LIBS ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})

include_directories ("${PROJECT_SOURCE_DIR}/../libfaster")
set (EXTRA_LIBS ${EXTRA_LIBS} faster)

#set (EXTRA_LIBS ${EXTRA_LIBS} efence)
#set (EXTRA_LIBS ${EXTRA_LIBS} duma)

add_executable(fexample-int fexample-int.cpp)
add_executable(fexample-indexed fexample-indexed.cpp)
add_executable(fexample-bulk-int fexample-bulk-int.cpp)
add_executable(fexample-int-file fexample-int-file.cpp)
#add_executable(fexample-int-array fexample-int-array.cpp)
add_executable(fexample-int-vector fexample-int-vector.cpp)
add_executable(fexample-mapByKey fexample-mapByKey.cpp)
add_executable(fexample-cogroup fexample-cogroup.cpp)
add_executable(fexample-cogroup2 fexample-cogroup2.cpp)
add_executable(pagerank pagerank.cpp)
add_executable(pagerank-bulk pagerank-bulk.cpp)
add_executable(pagerank-bp pagerank-bp.cpp)
#add_executable(pagerank-bp2 pagerank-bp2.cpp)
add_executable(pagerank-bulk2 pagerank-bulk2.cpp)
add_executable(kmeans kmeans.cpp)
add_executable(logicreg logicreg.cpp)

target_link_libraries (fexample-int  ${EXTRA_LIBS})
target_link_libraries (fexample-indexed  ${EXTRA_LIBS})
target_link_libraries (fexample-bulk-int  ${EXTRA_LIBS})
target_link_libraries (fexample-int-file  ${EXTRA_LIBS})
#target_link_libraries (fexample-int-array  ${EXTRA_LIBS})
target_link_libraries (fexample-int-vector  ${EXTRA_LIBS})
target_link_libraries (fexample-mapByKey  ${EXTRA_LIBS})
target_link_libraries (fexample-cogroup  ${EXTRA_LIBS})
target_link_libraries (fexample-cogroup2  ${EXTRA_LIBS})
target_link_libraries (pagerank  ${EXTRA_LIBS})
target_link_libraries (pagerank-bulk  ${EXTRA_LIBS})
target_link_libraries (pagerank-bp  ${EXTRA_LIBS})
#target_link_libraries (pagerank-bp2  ${EXTRA_LIBS})
target_link_libraries (pagerank-bulk2  ${EXTRA_LIBS})
target_link_libraries (kmeans  ${EXTRA_LIBS})
target_link_libraries (logicreg  ${EXTRA_LIBS})

#cotire(fexample-int)
#cotire(fexample-indexed)
#cotire(fexample-bulk-int)
#cotire(fexample-int-file)
#cotire(fexample-int-array)
#cotire(fexample-int-vector)
#cotire(fexample-mapByKey)
#cotire(fexample-cogroup)
#cotire(fexample-cogroup2)
#cotire(pagerank)
#cotire(pagerank-bulk)
#cotire(pagerank-bp)
#cotire(pagerank-bulk2)
#cotire(kmeans)

#install(TARGETS fexample-int DESTINATION bin)
#install(TARGETS fexample-bulk-int DESTINATION bin)
#install(TARGETS fexample-int-file DESTINATION bin)
#install(TARGETS fexample-int-array DESTINATION bin)
