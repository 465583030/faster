cmake_minimum_required(VERSION 2.8)

project(libfaster)

add_definitions(-O0)
add_definitions(-ggdb)
add_definitions(-g3)
#add_definitions(-pg)

set (libfaster_VERSION_MAJOR 0)
set (libfaster_VERSION_MINOR 1)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c++11 -Wall -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ldl ")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

find_package(OpenMP)
if(OPENMP_FOUND)
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
 set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif(OPENMP_FOUND)

find_package(MPI REQUIRED)
#set (MPI_CXX_COMPILER "mpicc")
add_definitions(${MPI_CXX_COMPILE_FLAGS})
include_directories(${MPI_CXX_INCLUDE_PATH})
link_directories(${MPI_CXX_LIBRARIES})
#set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
#set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
#include_directories("/usr/include/openmpi/")
set (EXTRA_LIBS ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})

#set (EXTRA_LIBS ${EXTRA_LIBS} efence)

#set (MODULES ${MODULES} fdd.cpp ) # Pure templates now
#set (MODULES ${MODULES} indexedFdd.cpp ) # Pure templates now
set (MODULES ${MODULES} fastContext.cpp )
#set (MODULES ${MODULES} fastComm.cpp ) to DL
#set (MODULES ${MODULES} fastCommBuffer.cpp ) to DL
set (MODULES ${MODULES} misc.cpp )
set (MODULES ${MODULES} worker.cpp )
set (MODULES ${MODULES} workerRun.cpp )
set (MODULES ${MODULES} workerCreate.cpp )
set (MODULES ${MODULES} workerICreate.cpp )
set (MODULES ${MODULES} workerFddBase.cpp )
set (MODULES ${MODULES} workerFddWrapper.cpp ) 
#set (MODULES ${MODULES} workerSFdd.cpp ) to DL
#set (MODULES ${MODULES} workerCFdd.cpp ) to DL
#set (MODULES ${MODULES} workerPFdd.cpp ) to DL
#set (MODULES ${MODULES} fddStorage.cpp ) to DL
set (MODULES ${MODULES} indexedFddStorage.cpp )
#set (MODULES ${MODULES} workerFddCore.cpp )
set (MODULES ${MODULES} workerIFdd.cpp )
set (MODULES ${MODULES} workerIPFdd.cpp )
set (MODULES ${MODULES} workerIFddCore.cpp )
set (MODULES ${MODULES} workerIFddInstance0.cpp )
set (MODULES ${MODULES} workerIFddInstance1.cpp )
set (MODULES ${MODULES} workerIFddInstance2.cpp )
set (MODULES ${MODULES} workerIFddInstance3.cpp )
set (MODULES ${MODULES} workerIFddInstance4.cpp )
set (MODULES ${MODULES} workerIFddInstance5.cpp )
set (MODULES ${MODULES} workerIFddInstance6.cpp )
set (MODULES ${MODULES} workerIFddInstance7.cpp )
set (MODULES ${MODULES} workerIFddInstance8.cpp )
set (MODULES ${MODULES} workerIFddInstance9.cpp )
set (MODULES ${MODULES} workerIFddInstance10.cpp )
set (MODULES ${MODULES} workerIFddInstance11.cpp )
set (MODULES ${MODULES} workerIPFddInstance0.cpp )
set (MODULES ${MODULES} workerIPFddInstance1.cpp )
set (MODULES ${MODULES} workerIPFddInstance2.cpp )
set (MODULES ${MODULES} workerIPFddInstance3.cpp )
set (MODULES ${MODULES} workerIPFddInstance4.cpp )
set (MODULES ${MODULES} workerIPFddInstance5.cpp )

set (HEADERS ${HEADERS} ../include/definitions.h  )
set (HEADERS ${HEADERS} ../include/fastComm.h  )
set (HEADERS ${HEADERS} ../include/fastCommBuffer.h)
set (HEADERS ${HEADERS} ../include/fastContext.h  )
set (HEADERS ${HEADERS} ../include/fastTask.h  )
set (HEADERS ${HEADERS} ../include/fdd.h  )
set (HEADERS ${HEADERS} ../include/fddBase.h  )
set (HEADERS ${HEADERS} ../include/fddStorage.h  )
set (HEADERS ${HEADERS} ../include/fddStorageBase.h  )
set (HEADERS ${HEADERS} ../include/indexedFdd.h  )
set (HEADERS ${HEADERS} ../include/indexedFddStorage.h  )
set (HEADERS ${HEADERS} ../include/libfaster.h  )
set (HEADERS ${HEADERS} ../include/misc.h  )
set (HEADERS ${HEADERS} ../include/worker.h  )
set (HEADERS ${HEADERS} ../include/workerFddBase.h  )
set (HEADERS ${HEADERS} ../include/workerFdd.h  )
set (HEADERS ${HEADERS} ../include/workerIFdd.h)

# Common Dynamic LINKED libs
add_library( fasterCommon SHARED fastComm.cpp fastCommBuffer.cpp ${EXTRA_LIBS} )
set ( COMMDLIBS  fasterCommon )

# Worker Side Dynamic LINKED libs
add_library(fasterWorkerFddCore SHARED workerFddCore.cpp fddStorage.cpp )
set ( COMMDLLIBS fasterWorkerFddCore )

#add_library(fasterWorkerIFddCore SHARED workerIFddCore.cpp indexedFddStorage.cpp )
#add_library(fasterWorkerIFdd SHARED workerIFdd.cpp )
#add_library(fasterWorkerIPFdd SHARED workerIPFdd.cpp )
#set ( ICOMMDLLIBS fasterWorkerIFdd fasterWorkerIFddCore )
#set ( IPCOMMDLLIBS fasterWorkerIPFdd fasterWorkerIFddCore )

# Dynamic LOADED libs
add_library(fasterWorkerSFdd SHARED workerSFdd.cpp)
add_library(fasterWorkerCFdd SHARED workerCFdd.cpp)
add_library(fasterWorkerPFdd SHARED workerPFdd.cpp)
#add_library(fasterWorkerIFddInstance0  SHARED workerIFddInstance0.cpp )
#add_library(fasterWorkerIFddInstance1  SHARED workerIFddInstance1.cpp )
#add_library(fasterWorkerIFddInstance2  SHARED workerIFddInstance2.cpp )
#add_library(fasterWorkerIFddInstance3  SHARED workerIFddInstance3.cpp )
#add_library(fasterWorkerIFddInstance4  SHARED workerIFddInstance4.cpp )
#add_library(fasterWorkerIFddInstance5  SHARED workerIFddInstance5.cpp )
#add_library(fasterWorkerIFddInstance6  SHARED workerIFddInstance6.cpp )
#add_library(fasterWorkerIFddInstance7  SHARED workerIFddInstance7.cpp )
#add_library(fasterWorkerIFddInstance8  SHARED workerIFddInstance8.cpp )
#add_library(fasterWorkerIFddInstance9  SHARED workerIFddInstance9.cpp )
#add_library(fasterWorkerIFddInstance10 SHARED workerIFddInstance10.cpp )
#add_library(fasterWorkerIFddInstance11 SHARED workerIFddInstance11.cpp )
#add_library(fasterWorkerIPFddInstance0 SHARED workerIPFddInstance0.cpp )
#add_library(fasterWorkerIPFddInstance1 SHARED workerIPFddInstance1.cpp )
#add_library(fasterWorkerIPFddInstance2 SHARED workerIPFddInstance2.cpp )
#add_library(fasterWorkerIPFddInstance3 SHARED workerIPFddInstance3.cpp )
#add_library(fasterWorkerIPFddInstance4 SHARED workerIPFddInstance4.cpp )
#add_library(fasterWorkerIPFddInstance5 SHARED workerIPFddInstance5.cpp )

# Interface lib
add_library(faster SHARED ${MODULES})

target_link_libraries(fasterWorkerSFdd ${COMMDLLIBS} ${COMMDLIBS})
target_link_libraries(fasterWorkerCFdd ${COMMDLLIBS} ${COMMDLIBS})
target_link_libraries(fasterWorkerPFdd ${COMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance0   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance1   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance2   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance3   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance4   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance5   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance6   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance7   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance8   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance9   ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance10  ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIFddInstance11  ${ICOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIPFddInstance0  ${IPCOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIPFddInstance1  ${IPCOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIPFddInstance2  ${IPCOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIPFddInstance3  ${IPCOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIPFddInstance4  ${IPCOMMDLLIBS} ${COMMDLIBS})
#target_link_libraries(fasterWorkerIPFddInstance5  ${IPCOMMDLLIBS} ${COMMDLIBS})
target_link_libraries (faster ${EXTRA_LIBS} ${COMMDLIBS})

#install(TARGETS libfaster DESTINATION lib)
#install(FILES ${HEADERS} DESTINATION include)
